package fingerprint

import (
	"crypto/sha512"
	"testing"

	"github.com/stretchr/testify/assert"
)

const ALICE_TEL = "+14152222222"

//https://github.com/signalapp/libsignal-protocol-java/blob/fde96d22004f32a391554e4991e4e1f0a14c2d50/tests/src/test/java/org/whispersystems/libsignal/fingerprint/NumericFingerprintGeneratorTest.java#L13
// Without first byte (0x05), since this implementation doesn't use a DJB_TYPE
var ALICE_KEY = []byte{0x05, 0x06, 0x86, 0x3b, 0xc6, 0x6d, 0x02, 0xb4, 0x0d, 0x27,
	0xb8, 0xd4, 0x9c, 0xa7, 0xc0, 0x9e, 0x92, 0x39, 0x23, 0x6f, 0x9d, 0x7d,
	0x25, 0xd6, 0xfc, 0xca, 0x5c, 0xe1, 0x3c, 0x70, 0x64, 0xd8, 0x68}

const BOB_TEL = "+14153333333"

//https://github.com/signalapp/libsignal-protocol-java/blob/fde96d22004f32a391554e4991e4e1f0a14c2d50/tests/src/test/java/org/whispersystems/libsignal/fingerprint/NumericFingerprintGeneratorTest.java#L14
// Without first byte (0x05), since this implementation doesn't use a DJB_TYPE
var BOB_KEY = []byte{0x05, 0xf7, 0x81, 0xb6, 0xfb, 0x32, 0xfe, 0xd9, 0xba, 0x1c, 0xf2,
	0xde, 0x97, 0x8d, 0x4d, 0x5d, 0xa2, 0x8d, 0xc3, 0x40, 0x46, 0xae, 0x81,
	0x44, 0x02, 0xb5, 0xc0, 0xdb, 0xd9, 0x6f, 0xda, 0x90, 0x7b}

var FINGERPRINT = []string{"30035", "44776", "92869", "39689", "28698", "76765", "45825", "75691", "62576", "84344", "09180", "79131"}

func TestCreateFingerprintSimple_alice(t *testing.T) {

	result, _, err := CreateFingerprintSimple(1, ALICE_TEL, ALICE_KEY, BOB_TEL, BOB_KEY)

    assert.Nil(t, err)
	assert.Equal(t, FINGERPRINT, result)
}

func TestCreateFingerprintSimple_bob(t *testing.T) {

	result, _, err := CreateFingerprintSimple(1, BOB_TEL, BOB_KEY, ALICE_TEL, ALICE_KEY)

	assert.Nil(t, err)
	assert.Equal(t, FINGERPRINT, result)
}

func TestJavaLikeDigest(t *testing.T) {
	digest := sha512.New()
	hash := []byte{0x05, 0x05, 0x05, 0x05}
	result := []byte{0x75, 0xa7, 0x28, 0xd5, 0xcc, 0x3e, 0x69, 0xf0, 0x95, 0x2c,
		0xe8, 0xbe, 0xb6, 0xf0, 0xde, 0x71, 0x6a, 0x44, 0xcb, 0xdc, 0x91, 0x66,
		0x22, 0x9b, 0x11, 0x41, 0x5a, 0xc9, 0xf1, 0x5d, 0x22, 0x5a, 0x56, 0xa1,
		0xc, 0xa0, 0xc1, 0x8c, 0xbb, 0xd6, 0xcc, 0x3, 0x1e, 0x49, 0x3c, 0x57,
		0x72, 0x8b, 0xbf, 0x9f, 0xbb, 0xb7, 0xad, 0x94, 0xb6, 0xa, 0x5b, 0xcf,
		0xd5, 0xcd, 0x34, 0xa3, 0x52, 0x43}
	hash = javaLikeDigest(digest, hash)
	assert.Equal(t, result, hash)
}

func TestJavaLikeUpdate(t *testing.T) {
	digest := sha512.New()
	hash := []byte{0x05, 0x05, 0x05, 0x05}
	result := []byte{0xee, 0x1f, 0xa9, 0xb5, 0x63, 0xb5, 0x71, 0x91, 0x7b, 0x13,
		0x64, 0x38, 0xe4, 0x1, 0x52, 0x7, 0xa0, 0x41, 0x3d, 0x5c, 0xa0, 0x58,
		0xf9, 0xf2, 0x36, 0x66, 0x55, 0x67, 0x3, 0x1a, 0x87, 0x81, 0x96, 0xef,
		0x5a, 0xc8, 0x4e, 0x1e, 0x8e, 0x68, 0x42, 0x57, 0xbd, 0x61, 0x75, 0x1d,
		0x99, 0xd6, 0xb8, 0x4, 0x96, 0x5a, 0x9d, 0xe6, 0x37, 0x1c, 0xbe, 0x45,
		0x5d, 0xc3, 0x72, 0x3b, 0x9e, 0xec}
	javaLikeUpdate(digest, hash)
	hash = javaLikeDigest(digest, hash)
	assert.Equal(t, result, hash)
}
